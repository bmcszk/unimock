---
description: 
globs: 
alwaysApply: true
---
# Go Development Guidelines

AI Agents MUST ALWAYS adhere to these Go development guidelines.

## Core Principles & Practices
- **Interfaces:**
    - Interfaces MUST be defined per consumer needs (Interface Segregation Principle).
    - Interfaces MUST ONLY be created when necessary (polymorphism, testing, decoupling). AI Agent MUST AVOID premature/excessive interface creation.
- **Auto-generated Files:** AI Agent MUST NEVER apply Go rules, formatting, or refactoring to files containing "DO NOT EDIT" (or similar) comments.
- **Service Structure (Packages):** (Refer to `go_project_setup_guideline.mdc` for full structure)
    - `handler`: API/request handling.
    - `service`: Business logic.
    - `storage`: Data persistence.
    - `model`:
        - Core data structures for cross-package use (e.g., `pkg/client` and `internal` services) MUST reside in `pkg/model/`.
        - `internal`-only data structures MAY be in `internal/model/` or co-located.
        - AI Agent MUST AVOID premature generalization; promote to `pkg/model/` ONLY if wider use is necessary.
        - This applies to generated models (e.g., `sqlc`) if shared beyond `internal` scope.
- **Data Model Design:**
    - For core data structures (shared, external contracts, persistent entities), structure MUST be clearly defined and agreed upon.
    - AI Agent MUST AVOID unnecessary nesting or refactoring into sub-structs unless it genuinely clarifies the model or is required for specific marshalling/unmarshalling.
    - AI Agent MUST confirm intended structure if ambiguity exists, especially for multi-purpose models.
- **Logging:** `slog` MUST be used for ALL application logging. Standard `log` package MUST NEVER be used for application logging.
- **Error Handling:** ALL returned errors MUST be wrapped with context: `fmt.Errorf("short descriptive context: %w", err)`.
- **Concurrency:** `golang.org/x/sync/errgroup` MUST be used for managing concurrent goroutines.

## Recommended Libraries & Tools
(These are strongly recommended; deviations require explicit justification in `docs/decisions.md`)
- **Configuration:** `env` (`github.com/caarlos0/env`)
- **HTTP Routing:** `Chi` (`github.com/go-chi/chi`)
- **Database Interaction (SQLC):**
    - `SQLC` (`docs.sqlc.dev`) MUST be used for type-safe Go code generation for the relational data layer.
    - **Schema Source:** When using `SQLC` with `golang-migrate`, `SQLC` MUST be configured to read schema from the `golang-migrate` migration directory. Migration filenames MUST have lexicographical ordering (e.g., zero-padded).
- **Database Migrations:** `golang-migrate` (`github.com/golang-migrate/migrate`)
- **Event-Driven Systems:** `Watermill` (`watermill.io/`) (if applicable)

## Development Methodology
- **Test-Driven Development (TDD) Cycle (MANDATORY):**
    1.  AI Agent MUST create a minimal code stub (empty function/struct).
    2.  AI Agent MUST write a unit test against the stub (this test MUST initially fail).
    3.  AI Agent MUST implement logic to make the test pass.
    - TDD is a development methodology, not just a testing strategy. It ensures tests validate intended functionality from the start.

## Testing Strategy
- **Categorization:**
    - **Unit Tests (`//go:build unit`):**
        - MUST test individual components (functions, structs) in isolation.
        - ALL external dependencies (DB, APIs, other services) MUST be mocked/stubbed.
        - AI Agent MUST utilize the `testify` library for assertions (`github.com/stretchr/testify/assert` or `require`).
        - AI Agent MUST employ the `testify/mock` library for creating mocks.
        - MUST be fast; NO Docker or external services ALLOWED.
    - **End-to-End (E2E) / Integration Tests (`//go:build e2e`):**
        - MUST test system behavior (whole or integrated parts).
        - SHOULD be BDD style. For cucumber-like test structure guidance without specific libraries (e.g. Godog), AI Agent MUST refer to patterns in `github.com/bmcszk/effective-monorepo/tree/feature/tilt/e2e`.
        - For mocking 3rd party REST services during E2E tests, `unimock` (`github.com/bmcszk/unimock`) MUST be used.
        - MUST require a running application and dependencies (e.g., via Docker Compose).
- **Execution:** Both unit and E2E tests MUST be runnable via dedicated Makefile targets (e.g., `make test-unit`, `make test-e2e`).

## Code Quality & Workflow
- **Pre-commit Checks (`make check`):**
    - A single Makefile target (`make check`) MUST verify Go code quality BEFORE ANY commit.
    - This target MUST include:
        - `go build ./...`
        - `golangci-lint run`
        - Unit tests (e.g., `make test-unit` or `go test -tags=unit ./...`)
    - `make check` MUST NOT require Docker or external services.
