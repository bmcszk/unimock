---
description: 
globs: 
alwaysApply: true
---
# Project Overview & Workflow

This document MANDATES project overview and workflow rules. AI Agents MUST ALWAYS adhere to these rules.
This is a Go project (`github.com/bmcszk/unimock`).

## Development Methodology: Test-Driven Development (TDD)
- AI Agent MUST ALWAYS write tests *before* writing implementation code.
- AI Agent MUST ensure tests ADEQUATELY cover requirements (cross-reference `docs/scenarios.md`).
- AI Agent MUST apply TDD principles for EVERY task (defined in `docs/tasks.md`).

## Documentation
AI Agent MUST ALWAYS consult and adhere to:
- `.cursor/rules/requirement_workflow.mdc` for managing requirements and test scenarios.
- `.cursor/rules/task_workflow.mdc` for task creation and management.

1.  **Decisions:** AI Agent MUST document ALL significant architectural or design decisions incrementally in `docs/decisions.md`, including rationale.
2.  **README:** AI Agent MUST keep `README.md` up-to-date with essential project information (setup, build, usage).
3.  **Date/Time in Documentation:** AI Agent MUST obtain current date/time for ANY documentation via command line (e.g., `date +%Y-%m-%d`).
4.  **Project Structure Document:** AI Agent MUST use `docs/project_structure.md` for understanding project structure.
5.  **Learnings Document:** AI Agent MUST record ALL mistakes and resolutions in `docs/learnings.md`.

## Quality Assurance & Workflow
1.  **Pre-commit Checks:** AI Agent MUST NEVER commit code UNLESS it has been verified by ALL of the following, which MUST pass:
    *   Running the consolidated Makefile target: `make check`. This target MUST include:
        *   Compiling the project (e.g., `go build ./...`)
        *   Running linters (e.g., `golangci-lint run`)
        *   Running ALL **unit tests** (e.g., `make test-unit` or `go test -tags=unit ./...`)
    *   Running ALL **End-to-End (E2E) tests** (e.g., `make test-e2e`).
2.  **Makefile Targets for Tools:** ALL essential development tools (e.g., `sqlc`, `migrate`, linters) MUST have corresponding targets in the main `Makefile`.
3.  **Test Coverage:** AI Agent MUST adhere to test coverage guidelines in `requirement_workflow.mdc`.
4.  **Task Completion & Version Control:** AI Agent MUST adhere to task completion and version control guidelines in `task_workflow.mdc`.

## AI Assistant (You)
- AI Agent MUST ALWAYS adhere to ALL guidelines in this document and ALL referenced `.mdc` files WITHOUT explicit reminders.
- AI Agent MUST ALWAYS, at the start of ANY request, verify project root and current date (using `date +%Y-%m-%d`).
- When asked to perform a task, AI Agent MUST ALWAYS consider and update relevant documentation.
- AI Agent MUST follow `.cursor/rules/task_workflow.mdc` for task processing.
- AI Agent MUST follow `.cursor/rules/requirement_workflow.mdc` for requirements and scenarios.
- If a "file or directory not found" error occurs, AI Agent MUST first run `pwd`, then consult `docs/project_structure.md` to verify the expected location BEFORE trying again or reporting an issue.
- **Mistake Logging**: If AI Agent makes a mistake (e.g., incorrect code, misinterpreting requirements, deviating from guidelines), it MUST:
    1.  Acknowledge the mistake.
    2.  Document the mistake in `docs/learnings.md` (what went wrong).
    3.  Once corrected, update the entry in `docs/learnings.md` with the resolution/learning.

## Testing Guidelines
- **End-to-End (E2E) / Integration Tests:** These tests MUST verify system behavior (whole or integrated parts). They MUST be written BDD-style (e.g., Godog). They REQUIRE a running application and dependencies (e.g., Docker Compose). Go build tag `//go:build e2e` MUST be used.
- E2E tests MUST cover ALL functional requirements in `docs/requirements.md` and ALL scenarios in `docs/scenarios.md`. This ensures validation of key user flows and API interactions against a realistic (Dockerized) environment.
- Both unit and E2E tests MUST be runnable via dedicated Makefile targets (e.g., `make test-unit`, `make test-e2e`).
