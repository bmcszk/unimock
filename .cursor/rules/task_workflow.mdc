---
description: 
globs: 
alwaysApply: true
---
# Task Workflow

This document outlines the workflow for creating, managing, and completing tasks within the project.

## Task Creation & Management (from `docs/tasks.md`)

1.  When requirements change (i.e., `docs/requirements.md` is updated), create a set of tasks in **ToDo** state. These new tasks **must** be appended to the end of the `docs/tasks.md` file.
    *   When a requirement is a functional requirement, test scenarios should be added to `docs/scenarios.md` and a task should be created to implement E2E tests for every scenario.
2.  After new tasks are created, remove all tasks with **Done** status from `docs/tasks.md`.
3.  Tasks should be always created and managed by the AI agent, including assigning IDs and tracking status in `docs/tasks.md`.

## AI Assistant Task Processing Workflow

1.  **Task Selection:**
    *   Go through tasks from `docs/tasks.md` one at a time, by taking the first task from the list in **ToDo** state.
    *   If there are no more tasks in **ToDo** state, take the first in **Blocked** state.
    *   If a task is marked as **Blocked**, skip it and move to the next available **ToDo** task. Return to any **Blocked** tasks at the end, after all other **ToDo** tasks have been addressed, or when the blocking condition is resolved.
2.  **Update Task Status:** Before starting work on a task, the AI assistant **must** update its status to **In Progress** in `docs/tasks.md`.
3.  **Task Execution:**
    *   Perform the task changes using TDD (if possible).
    *   Ensure all relevant documentation (`docs/requirements.md`, `docs/scenarios.md`, `docs/tasks.md`, `docs/decisions.md`, `README.md`, `docs/project_structure.md`, `docs/learnings.md`) is considered and updated if necessary.
    *   Proactively suggest or perform checks (compile, lint, test) as part of the development process for the current task.
4.  **Task Completion:** A task is completed when:
    *   Code changes are done.
    *   Functional requirements are met.
    *   Relevant test scenarios from `docs/scenarios.md` are covered by E2E tests (if applicable).
    *   `make check` is passing for the task's changes.
    *   `make test-e2e` is passing for the task's changes.
    *   Mark the task as **Done** in `docs/tasks.md`.
5.  **Post-Completion:**
    *   After successfully committing and pushing changes for a completed task, immediately start processing the next task in **ToDo** status from `docs/tasks.md` (if any), following the same workflow.
    *   Whenever the AI knows what to do next (including starting a new task), it should proceed without asking for confirmation.

## Task Completion & Version Control

1.  When a task from `docs/tasks.md` is marked as **Done** (i.e., functional requirements met, relevant test scenarios from `docs/scenarios.md` covered by E2E tests, and all pre-commit checks like `make check` and `make test-e2e` have passed for the task's changes):
    *   The AI assistant **must** ensure all changed and new files related to the task are staged for commit (e.g., by using appropriate tool calls to accept/stage all proposed and applied changes).
    *   The AI assistant **must** then propose a Git commit. The commit message **must** follow the convention: `[TASK-ID] Short descriptive title for the task` (e.g., `[TASK-109] Add unit tests for StockPriceWorker`).
    *   After the commit is successfully made (simulated or confirmed by the user), the AI assistant **must** propose a Git push to the current branch.
2.  Push other working changes (even if a task is not fully **Done**) to the remote repository frequently, after ensuring they pass pre-commit checks and are committed. This applies especially to the AI assistant's work on a feature/fix branch as per `requirement_workflow.mdc`.
