# Example values file with scenarios enabled
# Use: helm install my-unimock ./unimock -f values-with-scenarios.yaml

# Unimock runs as single instance only (hardcoded to 1 replica)

image:
  repository: ghcr.io/bmcszk/unimock
  tag: "latest"
  pullPolicy: IfNotPresent

# Enable scenarios support
scenarios:
  enabled: true
  data:
    scenarios:
      # Health check scenario
      - uuid: "health-check-enhanced"
        method: "GET"
        path: "/_uni/health"
        status_code: 200
        content_type: "application/json"
        headers:
          X-Service: "unimock"
          X-Version: "1.0.0"
        data: |
          {
            "status": "ok",
            "service": "unimock",
            "version": "1.0.0",
            "timestamp": "2025-01-01T00:00:00Z"
          }

      # Sample users
      - uuid: "sample-user-1"
        method: "GET"
        path: "/api/users/1"
        status_code: 200
        content_type: "application/json"
        data: |
          {
            "id": "1",
            "name": "John Doe",
            "email": "john.doe@example.com",
            "role": "admin",
            "created_at": "2025-01-01T00:00:00Z"
          }

      - uuid: "sample-user-2"
        method: "GET"
        path: "/api/users/2"
        status_code: 200
        content_type: "application/json"
        data: |
          {
            "id": "2",
            "name": "Jane Smith",
            "email": "jane.smith@example.com",
            "role": "user",
            "created_at": "2025-01-01T00:00:00Z"
          }

      # Sample products
      - uuid: "sample-product-1"
        method: "GET"
        path: "/api/products/1"
        status_code: 200
        content_type: "application/json"
        data: |
          {
            "id": "1",
            "name": "Widget A",
            "price": 29.99,
            "category": "widgets",
            "in_stock": true
          }

      # Error scenarios
      - uuid: "not-found-user"
        method: "GET"
        path: "/api/users/999"
        status_code: 404
        content_type: "application/json"
        data: |
          {
            "error": "User not found",
            "code": "USER_NOT_FOUND",
            "message": "The requested user does not exist"
          }

      # POST scenarios
      - uuid: "create-user-success"
        method: "POST"
        path: "/api/users"
        status_code: 201
        content_type: "application/json"
        location: "/api/users/123"
        headers:
          X-Request-ID: "req-123"
        data: |
          {
            "id": "123",
            "name": "New User",
            "email": "new.user@example.com",
            "role": "user",
            "created_at": "2025-01-01T00:00:00Z"
          }

      # XML response example
      - uuid: "xml-response"
        method: "GET"
        path: "/api/legacy/user/1"
        status_code: 200
        content_type: "application/xml"
        data: |
          <?xml version="1.0" encoding="UTF-8"?>
          <user>
            <id>1</id>
            <name>John Doe</name>
            <email>john.doe@example.com</email>
            <role>admin</role>
          </user>

# Enhanced configuration for more realistic API endpoints
config:
  sections:
    users:
      path_pattern: "/api/users/*"
      body_id_paths: ["/id"]
      return_body: true
      strict_path: false
    products:
      path_pattern: "/api/products/*"
      body_id_paths: ["/id"]
      return_body: true
      strict_path: false
    orders:
      path_pattern: "/api/orders/*"
      body_id_paths: ["/order_id"]
      header_id_names: ["X-Order-ID"]
      return_body: true
      strict_path: false
    legacy:
      path_pattern: "/api/legacy/**"
      body_id_paths: ["//id"]
      return_body: true
      strict_path: false

# Resource configuration for better performance
resources:
  requests:
    cpu: 200m
    memory: 256Mi
  limits:
    cpu: 500m
    memory: 512Mi

# Service configuration
service:
  type: ClusterIP
  port: 8080

# Enable better health checks with startup probe
probes:
  startup:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 5
    failureThreshold: 6
  liveness:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
  readiness:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5

# Security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65534
  runAsGroup: 65534

podSecurityContext:
  fsGroup: 65534

# Environment variables
env:
  UNIMOCK_PORT: "8080"
  UNIMOCK_LOG_LEVEL: "info"